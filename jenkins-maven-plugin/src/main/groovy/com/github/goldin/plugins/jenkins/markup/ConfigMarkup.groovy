package com.github.goldin.plugins.jenkins.markup

import com.github.goldin.plugins.jenkins.Job
import com.github.goldin.plugins.jenkins.beans.ParameterType
import org.gcontracts.annotations.Requires

/**
 * Generates Jenkins config file XML markup.
 */
class ConfigMarkup extends Markup
{
    private final Job    job
    private final String timestamp

    @Requires({ job && ( timestamp != null ) })
    ConfigMarkup ( Job job, String timestamp )
    {
        this.job       = job
        this.timestamp = timestamp
    }


    /**
     * Builds Jenkins config XML markup using this object markup builder.
     */
    @Override
    void addMarkup ()
    {
        final isMaven = Job.JobType.maven.is( job.jobType )

        builder.with {

            mkp.xmlDeclaration( version: '1.0', encoding: 'UTF-8' )

            add( '<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n' )
            add( "<!-- Generated automatically by [${ job.generationPom }]${ timestamp } -->\n" )
            add( '<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n' )

            "${ isMaven ? 'maven2-moduleset' : 'project' }" {
                actions()
                addDescription()
                if ( job.displayName ){ displayName( job.displayName ) }
                if ( [ job.daysToKeep, job.numToKeep, job.artifactDaysToKeep, job.artifactNumToKeep ].any{ it > -1 } )
                {
                    logRotator {
                        daysToKeep( job.daysToKeep )
                        numToKeep( job.numToKeep )
                        artifactDaysToKeep( job.artifactDaysToKeep )
                        artifactNumToKeep( job.artifactNumToKeep )
                    }
                }
                keepDependencies( false )
                addProperties()
                addScm()
                add( 'quietPeriod',           job.quietPeriod )
                add( 'scmCheckoutRetryCount', job.scmCheckoutRetryCount )
                assignedNode( job.node ?: '' )
                canRoam( job.node ? false : true )
                disabled( job.disabled )
                blockBuildWhenDownstreamBuilding( job.blockBuildWhenDownstreamBuilding )
                blockBuildWhenUpstreamBuilding( job.blockBuildWhenUpstreamBuilding )
                jdk( job.jdkName )
                add( 'authToken', job.authToken )
                addTriggers()
                concurrentBuild( false )
                if ( isMaven ){ addMaven() }
                else          { builders{ job.tasks*.addMarkup() }}
            }
        }
    }


    /**
     * Adds config's {@code <description>} section to the {@link #builder}.
     */
    void addDescription ()
    {
        builder.description {
            add( """
<![CDATA[<center>
    <h4>
        Job definition is generated by <a href="${ job.generationPom }">Maven</a>
        using <a href="http://evgeny-goldin.com/wiki/Jenkins-maven-plugin">&quot;jenkins-maven-plugin&quot;</a> ${ timestamp ?: '' }.
        <br/>
        If you <a href="${ job.jenkinsUrl + '/job/' + job.id + '/configure' }">configure</a> this project manually -
        it will probably be <a href="${ job.generationPom }">overwritten</a>!
    </h4>
</center>
${ job.description }
<p/>
${ new DescriptionTableMarkup( job ).markup }
]]>
${ Markup.INDENT }""" ) // Indentation correction: closing </description> tag is not positioned correctly due to String content injected
        }
    }


    /**
     * Adds {@code <properties>} section to the {@link #builder}.
     */
    void addProperties()
    {
        builder.with {
            builder.properties {
                add( job.properties )
                if ( job.parameters()) {
                    'hudson.model.ParametersDefinitionProperty' {
                        parameterDefinitions {
                            job.parameters().findAll{ it.type != ParameterType.jira }*.addMarkup( builder )
                        }
                    }
                    job.parameters().findAll{ it.type == ParameterType.jira }*.addMarkup( builder )
                }
                if ( job.gitHubUrl ) { 'com.coravy.hudson.plugins.github.GithubProjectProperty' { projectUrl( job.gitHubUrl ) }}
            }
        }
    }


    /**
     * Adds {@code <scm>} section to the {@link #builder}.
     */
    void addScm()
    {
        final scmBuilderClass = job.scmMarkupBuilderClass
        /**
         * {@link com.github.goldin.plugins.jenkins.Scm}
         */
        if  ( scmBuilderClass ){ scmBuilderClass.newInstance( builder, job ).addMarkup() }
        add( job.scm )
    }


    /**
     * Adds {@code <triggers>} section to the {@link #builder}.
     */
    void addTriggers()
    {
        builder.with {
            triggers( class: 'vector' ) {
                for ( trigger in job.triggers())
                {
                    "${ trigger.triggerClass }" {
                        spec(( trigger.description ? "#${ trigger.description }\n" : '' ) + trigger.expression )
                    }
                }
            }
        }
    }


    /**
     * Adds {@code <triggers>} section to the {@link #builder}.
     */
    void addMaven()
    {
        assert Job.JobType.maven.is( job.jobType )

        builder.with {
            rootPOM( job.pom )
            goals( job.mavenGoals )
            mavenName( job.mavenName )
            mavenOpts( job.mavenOpts ?: '' )
            aggregatorStyleBuild( true )
            incrementalBuild( job.incrementalBuild )

            if ( job.privateRepository || job.privateRepositoryPerExecutor )
            {
                localRepository( class: "hudson.maven.local_repo.${ job.privateRepository ? 'PerJobLocalRepositoryLocator' : 'PerExecutorLocalRepositoryLocator' }" )
            }

            ignoreUpstremChanges( ! job.buildOnSNAPSHOT )
            archivingDisabled( job.archivingDisabled )
            resolveDependencies( false )
            processPlugins( false )
            mavenValidationLevel( 0 )
            runHeadless( false )

            reporters {
                add( job.reporters )
                if ( job.mail.recipients )
                {
                    'hudson.maven.reporters.MavenMailer' {
                        recipients( job.mail.recipients )
                        dontNotifyEveryUnstableBuild( ! job.mail.sendForUnstable )
                        sendToIndividuals( job.mail.sendToIndividuals )
                    }
                }
            }
        }
    }
}
