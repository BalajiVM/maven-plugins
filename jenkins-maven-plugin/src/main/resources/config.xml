<?xml version='1.0' encoding='UTF-8'?>

<%
import static com.github.goldin.plugins.common.GMojoUtils.*
import com.github.goldin.plugins.jenkins.*
import com.github.goldin.plugins.jenkins.beans.*
import com.github.goldin.plugins.jenkins.Job.*
import com.github.goldin.plugins.jenkins.Job.JobType
import com.github.goldin.plugins.common.*
%>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Generated automatically by [${ job.generationPom }] ${ timestamp ?: '' } -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<${ ( job.jobType == JobType.maven ) ? 'maven2-moduleset' : 'project' }>
  <actions/>
  <description><![CDATA[<center>
    <h4>
    Job definition is generated by <a href="${ job.generationPom }">Maven</a>
    using <a href="http://evgeny-goldin.com/wiki/Jenkins-maven-plugin">"jenkins-maven-plugin"</a> ${ timestamp ?: '' }.
    <br/>
    If you <a href="${ job.jenkinsUrl + '/job/' + job.id + '/configure' }">configure</a> this project manually -
    it will probably be <a href="${ job.generationPom }">overwritten</a>!
    </h4>
</center>
${ job.description.trimMultiline() }
<p/>
${ job.descriptionTableMarkup.trimMultiline() }]]></description>
  <%
      if ( job.displayName )
      {
  %>
  <displayName>${ job.displayName }</displayName>
  <%
      }
      if ( [ job.daysToKeep, job.numToKeep, job.artifactDaysToKeep, job.artifactNumToKeep ].any{ it > -1 } )
      {
  %>
  <logRotator>
      <daysToKeep>${ job.daysToKeep }</daysToKeep>
      <numToKeep>${ job.numToKeep }</numToKeep>
      <artifactDaysToKeep>${ job.artifactDaysToKeep }</artifactDaysToKeep>
      <artifactNumToKeep>${ job.artifactNumToKeep }</artifactNumToKeep>
  </logRotator>
  <%
      }
  %>
  <keepDependencies>false</keepDependencies>
  <properties>
      ${ job.properties.addDollar() }
  <%
      if ( job.parameters()) { print getTemplate( '/parameters.xml' ).make([ job : job ]) }
      if ( job.gitHubUrl )
      {
  %>
      <com.coravy.hudson.plugins.github.GithubProjectProperty>
        <projectUrl>${ job.gitHubUrl }</projectUrl>
      </com.coravy.hudson.plugins.github.GithubProjectProperty>
  <%
      }
  %>
  </properties>
${ job.scmMarkup }
${ job.scm.addDollar() }
  <%
      if ( job.quietPeriod )
      {
  %>
  <quietPeriod>${ job.quietPeriod }</quietPeriod>
  <%
      }
      if ( job.scmCheckoutRetryCount )
      {
  %>
  <scmCheckoutRetryCount>${ job.scmCheckoutRetryCount }</scmCheckoutRetryCount>
  <%
      }
  %>
  <assignedNode>${ job.node ?: '' }</assignedNode>
  <canRoam>${ job.node ? false : true }</canRoam>
  <disabled>${ job.disabled }</disabled>
  <blockBuildWhenDownstreamBuilding>${ job.blockBuildWhenDownstreamBuilding }</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>${ job.blockBuildWhenUpstreamBuilding }</blockBuildWhenUpstreamBuilding>
  <jdk>${ job.jdkName }</jdk>
  <%
     if ( job.authToken )
     {
  %>
  <authToken>${job.authToken}</authToken>
  <%
     }
  %>
  <triggers class="vector">
  <%
     job.triggers().each
     {
         Trigger trigger ->
  %>
        <${ trigger.triggerClass }>
            <spec>${ trigger.description ? '# ' + trigger.description + '\n' : '' }${ trigger.expression }</spec>
        </${ trigger.triggerClass }>
  <%
     }
  %>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <%
        if ( job.jobType == JobType.maven )
        {
  %>
  <rootPOM>${ job.pom }</rootPOM>
  <goals>${ job.mavenGoals }</goals>
  <mavenName>${ job.mavenName }</mavenName>
  <mavenOpts>${ job.mavenOpts ?: '' }</mavenOpts>
  <aggregatorStyleBuild>true</aggregatorStyleBuild>
  <incrementalBuild>${ job.incrementalBuild }</incrementalBuild>
  <%
      if ( job.privateRepository || job.privateRepositoryPerExecutor )
      {
  %>
  <localRepository class="hudson.maven.local_repo.${ job.privateRepository ? 'PerJobLocalRepositoryLocator' : 'PerExecutorLocalRepositoryLocator' }"/>
  <%
      }
  %>
  <ignoreUpstremChanges>${ ! job.buildOnSNAPSHOT }</ignoreUpstremChanges>
  <archivingDisabled>${ job.archivingDisabled }</archivingDisabled>
  <resolveDependencies>false</resolveDependencies>
  <processPlugins>false</processPlugins>
  <mavenValidationLevel>0</mavenValidationLevel>
  <runHeadless>false</runHeadless>
  <reporters>
      ${ job.reporters.addDollar() }
  <%
        if ( job.mail?.recipients )
        {
  %>
      <hudson.maven.reporters.MavenMailer>
        <recipients>${ job.mail.recipients }</recipients>
        <dontNotifyEveryUnstableBuild>${ ! job.mail.sendForUnstable }</dontNotifyEveryUnstableBuild>
        <sendToIndividuals>${ job.mail.sendToIndividuals }</sendToIndividuals>
      </hudson.maven.reporters.MavenMailer>
  <%
        }
  %>
  </reporters>
  <%
        }
        else if ( job.jobType == JobType.free )
        {
  %>
  <builders>
${ job.tasks*.markup.join( '\n' ) }
  </builders>
  <%
        }
  %>
  <publishers>
${ job.publishers.addDollar() }
  <%
      if (( job.mail?.recipients ) && ( job.jobType != JobType.maven ))
      {
  %>
      <hudson.tasks.Mailer>
          <recipients>${ job.mail.recipients }</recipients>
          <dontNotifyEveryUnstableBuild>${ ! job.mail.sendForUnstable }</dontNotifyEveryUnstableBuild>
          <sendToIndividuals>${ job.mail.sendToIndividuals }</sendToIndividuals>
      </hudson.tasks.Mailer>
  <%
      }

      if (( job.deploy?.url ) && ( job.jobType == JobType.maven ))
      {
  %>
      <hudson.maven.RedeployPublisher>
          <id>${ job.deploy.id }</id>
          <url>${ job.deploy.url }</url>
          <uniqueVersion>${ job.deploy.uniqueVersion }</uniqueVersion>
          <evenIfUnstable>${ job.deploy.evenIfUnstable }</evenIfUnstable>
      </hudson.maven.RedeployPublisher>
  <%
      }

      if (( job.artifactory?.name ) && ( job.jobType == JobType.maven ))
      {
  %>
        <org.jfrog.hudson.ArtifactoryRedeployPublisher>
            <details>
                <artifactoryName>${ job.artifactory.name }</artifactoryName>
                <repositoryKey>${ job.artifactory.repository.addDollar() }</repositoryKey>
                <snapshotsRepositoryKey>${ job.artifactory.snapshotsRepository.addDollar() }</snapshotsRepositoryKey>
            </details>
            <deployArtifacts>${ job.artifactory.deployArtifacts }</deployArtifacts>
            <username>${ job.artifactory.user }</username>
            <scrambledPassword>${ job.artifactory.scrambledPassword }</scrambledPassword>
            <includeEnvVars>${ job.artifactory.includeEnvVars }</includeEnvVars>
            <skipBuildInfoDeploy>${ job.artifactory.skipBuildInfoDeploy }</skipBuildInfoDeploy>
            <evenIfUnstable>${ job.artifactory.evenIfUnstable }</evenIfUnstable>
            <runChecks>${ job.artifactory.runChecks }</runChecks>
            <violationRecipients>${ job.artifactory.violationRecipients }</violationRecipients>
        </org.jfrog.hudson.ArtifactoryRedeployPublisher>
  <%
      }

      if ( job.invoke?.jobs )
      {
         def anyConfigs = ( job.invoke.currentBuildParams || job.invoke.subversionRevisionParam ||
                            job.invoke.gitCommitParam     || job.invoke.params                  ||
                            job.invoke.propertiesFileParams )
  %>
        <hudson.plugins.parameterizedtrigger.BuildTrigger>
            <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                    <% if ( ! anyConfigs ) { %>
                    <configs class="java.util.Collections\$EmptyList"/>
                    <% } else { %>
                    <configs>
                        <% if ( job.invoke.currentBuildParams      ) { %><hudson.plugins.parameterizedtrigger.CurrentBuildParameters/><% } %>
                        <% if ( job.invoke.subversionRevisionParam ) { %><hudson.plugins.parameterizedtrigger.SubversionRevisionBuildParameters/><% } %>
                        <% if ( job.invoke.gitCommitParam          ) { %><hudson.plugins.git.GitRevisionBuildParameters/><% } %>
                        <% if ( job.invoke.params ) { %>
                            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                                <properties>${ job.invoke.params.readLines()*.trim().join( '\n' ) }</properties>
                            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                        <% } %>
                        <% if ( job.invoke.propertiesFileParams ) { %>
                            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
                                <propertiesFile>${ job.invoke.propertiesFileParams }</propertiesFile>
                            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
                        <% } %>
                    </configs>
                    <% } %>
                    <projects>${ job.invoke.jobs }</projects>
                    <condition>${ job.invoke.condition[ 0 ] }</condition>
                    <triggerWithNoParameters>${ job.invoke.triggerWithoutParameters }</triggerWithNoParameters>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
            </configs>
        </hudson.plugins.parameterizedtrigger.BuildTrigger>
  <%
       }
  %>
  </publishers>
  <buildWrappers>
${ job.buildWrappers.addDollar() }
  </buildWrappers>
  <%
      if ( job.jobType == JobType.maven )
      {
  %>
  <prebuilders>
${ ( job.groovys().findAll{ it.pre }*.markup +
     job.prebuildersTasks*.markup            +
     job.prebuilders.addDollar()).join( '\n' ) }
  </prebuilders>
  <postbuilders>
${ ( job.groovys().findAll{ ! it.pre }*.markup +
     job.postbuildersTasks*.markup             +
     job.postbuilders.addDollar()).join( '\n' ) }
  </postbuilders>
  <runPostStepsIfResult>
      <name>${ job.runPostStepsIfResult.name }</name>
      <ordinal>${ job.runPostStepsIfResult.ordinal }</ordinal>
      <color>${ job.runPostStepsIfResult.color }</color>
  </runPostStepsIfResult>
  <%
      }
  %>
</${ ( job.jobType == JobType.maven ) ? 'maven2-moduleset' : 'project' }>
